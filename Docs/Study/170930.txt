String (Class), StringBuffer, StringBuilder

String s = "abcd";
# 메모리  [abcd]
s += "efg";
# 메모리  [abcd, abcdefg]
String 데이터가 변경 될 경우 메모리에 새로운 데이터를 추가하고 메모리 참조를 바꿉니다
=> 메모리 소모가 크다

/*
 * String 객체는 한 번 생성되면 할당된 메모리 공간이 변하지 않습니다.
 * + 연산자 또는 concat 메서드를 통해 기존에 생성된 String 클래스 객체 문자열에 다른 문자열을 붙여도 기존 문자열에 새로운 문자열이 붙는 것이 아니라,
 * 새로운 String 객체를 만든 후, 새 String 객체에 연결된 문자열을 저장하고, 그 객체를 참조하도록 합니다.
 * (즉, String 클래스 객체는 Heap 메모리 영역(가비지 컬렉션이 동작하는 영역)에 생성되며, 한 번 생성된 객체의 내부 내용을 변화시킬 수 없습니다.
 * 기존 객체가 제거 되면 Java의 가비지 컬렉션이 회수합니다.)
 *
 * 출처: http://ooz.co.kr/298 [이러쿵저러쿵]
 * http://ooz.co.kr/298
 */

StringBuilder (StringBuilder)
String 관련 여러 API 가 제공 됩니다
StringBuilder sb = new StringBuilder("abcd");
# 메모리  [abcd]
sb.append("efg");
# 메모리  [abcdefg]

# 유연적으로 메모리를 사용합니다
/*
 * StringBuffer/StringBuffer는 String 과 다르게 동작합니다.
 * 문자열 연산 등으로 기존 객체에 공간이 부족하게 되는 경우,기존의 버퍼 크기를 늘리며 유연하게 동작합니다.
 * StringBuffer와 StringBuilder 클래스가 제공하는 메서드는 서로 동일합니다.
 *
 * 출처:http://ooz.co.kr/298 [이러쿵저러쿵]
 */


# String 의 사용의 단점 (메모리 사용이 비효율적이다)
/*
 * 문자열을 +를 활용해 합치는 경우 정확히 어느 버전까지인지 모르겠으나
 * 매번 String 인스턴스를 생성하는 방식이였어요. 그래서 성능상의 이슈가 많았죠.
 * 이런 성능 이슈를 개선하기 위해 JDK 1.5 (@changhwa.oh 설명에 따르면) 버전 이후에는 컴파일 단계에서 StringBuilder로 컴파일 되도록 변경되었어요.
 * 그래서 JDK 1.5 이후부터는 +를 활용해도 성능상에 큰 이슈는 없습니다.
 *
 * #StringBuffer 과 StringBuilder 의 차이점은 동기화 지원 여부에 따라 다릅니다
 * Buffer = 동시에 같은 값을 삽입 할 경우 (비동기) 동기화를하여 데이터 보장
 * (메소드 별로 syncronized 가 존재하여 동기화를 지원)
 *
 * Builder = 동기화를 하지 않아 단일 스레드에서 사용하면 좋습니다
 *
 * 출처 : https://slipp.net/questions/271
 */